{%- assign sec_id = '#shopify-section-' | append: section.id -%}

{%- style -%}
  
{{ sec_id }} .pc-countdown-timer-section {
  position: relative;
  margin: 0 auto;
  padding: 40px 0;
  max-width: 1200px;
  text-align: center;
}

{{ sec_id }} .pc-countdown-timer-section h1 {
  margin-bottom: 60px;
  font-family: 'Lato', sans-serif;
  font-weight: 300;
  font-size: 2.25em;
  text-transform: uppercase;
}

{{ sec_id }} .pc-countdown-timer-section h1 strong {
  font-weight: 400;
  color: {{ section.settings.highlight_color }};
}

{{ sec_id }} .pc-countdown {
  width: 720px;
  margin: 0 auto;
  display: flex;
  justify-content: center;
  gap: 45px;
}

{{ sec_id }} .pc-bloc-time {
  text-align: center;
}

{{ sec_id }} .pc-count-title {
  display: block;
  margin-bottom: 15px;
  font-family: 'Lato', sans-serif;
  font-size: 0.94em;
  color: #1a1a1a;
  text-transform: uppercase;
}

{{ sec_id }} .pc-figure-container {
  display: flex;
  gap: 10px;
}

{{ sec_id }} .pc-figure {
  position: relative;
  height: 110px;
  width: 100px;
  background-color: {{ section.settings.background_color }};
  border-radius: 8px;
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.2), inset 2px 4px 0 0 rgba(255, 255, 255, 0.08);
}

{{ sec_id }} .pc-figure > span {
  position: absolute;
  left: 0;
  right: 0;
  margin: auto;
  font-family: 'Lato', sans-serif;
  font-size: 5.94em;
  line-height: 107px;
  font-weight: 700;
  color: {{ section.settings.digit_color }};
}

{{ sec_id }} .pc-figure .pc-top, .pc-figure .pc-bottom-back {
  position: relative;
}

{{ sec_id }} .pc-figure .pc-top:after, .pc-figure .pc-bottom-back:after {
  content: "";
  position: absolute;
  z-index: -1;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

{{ sec_id }} .pc-figure .pc-top {
  z-index: 3;
  transform-origin: 50% 100%;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  transform: perspective(200px);
  height: 50%;
  overflow: hidden;
  backface-visibility: hidden;
}

{{ sec_id }} .pc-figure .pc-bottom {
  z-index: 1;
  height: 50%;
}

{{ sec_id }} .pc-figure .pc-bottom:before {
  content: "";
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  width: 100%;
  height: 95%;
  background-color: rgba(0, 0, 0, 0.02);
}

{{ sec_id }} .pc-figure .pc-bottom-back {
  top: 0;
  height: 50%;
  overflow: hidden;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

{{ sec_id }} .pc-figure .pc-bottom-back span {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin: auto;
}

{{ sec_id }} .pc-figure .pc-top-back {
  z-index: 4;
  bottom: 0;
  background-color: {{ section.settings.background_color }};
  transform-origin: 50% 0;
  transform: perspective(200px) rotateX(180deg);
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
  height: 50%;
  overflow: hidden;
  backface-visibility: hidden;
}

{{ sec_id }} .pc-figure .pc-top-back span {
  position: absolute;
  top: -100%;
  left: 0;
  right: 0;
  margin: auto;
}

{{ sec_id }} .pc-bottom-back {
    display: none;
}

@media (max-width: 767px) {
  {{ sec_id }} .pc-countdown {
    width: 100%;
    flex-direction: column;
    gap: 20px;
  }
  
  {{ sec_id }} .pc-figure {
    height: 80px;
    width: 70px;
  }
  
  {{ sec_id }} .pc-figure > span {
    font-size: 4em;
    line-height: 80px;
  }
}
{%- endstyle -%}

<div class="pc-countdown-timer-section">
  <h1>{{ section.settings.title }} <strong>{{ section.settings.highlighted_text }}</strong></h1>
  <div class="pc-countdown">
    {% for block in section.blocks %}
      {% case block.type %}
        
        {% when 'hours' %}
          <div class="pc-bloc-time pc-hours" data-init-value="{{ block.settings.hours }}">
            <span class="pc-count-title">{{ block.settings.title }}</span>
            <div class="pc-figure-container">
              <div class="pc-figure pc-hours-1" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
              <div class="pc-figure pc-hours-2" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
            </div>
          </div>
    
        {% when 'minutes' %}
          <div class="pc-bloc-time pc-min" data-init-value="{{ block.settings.minutes }}">
            <span class="pc-count-title">{{ block.settings.minutes_title }}</span>
            <div class="pc-figure-container">
              <div class="pc-figure pc-min-1" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
              <div class="pc-figure pc-min-2" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
            </div>
          </div>
    
        {% when 'seconds' %}
          <div class="pc-bloc-time pc-sec" data-init-value="{{ block.settings.seconds }}">
            <span class="pc-count-title">{{ block.settings.seconds_title }}</span>
            <div class="pc-figure-container">
              <div class="pc-figure pc-sec-1" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
              <div class="pc-figure pc-sec-2" style="background-color: {{ block.settings.background_color }};">
                <span class="pc-top">0</span>
                <span class="pc-top-back"><span>0</span></span>
                <span class="pc-bottom">0</span>
                <span class="pc-bottom-back"><span>0</span></span>
              </div>
            </div>
          </div>
      {% endcase %}
    {% endfor %}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const Countdown = {
    init: function() {
      this.$ = {
        hours: document.querySelectorAll('.pc-bloc-time.pc-hours .pc-figure'),
        minutes: document.querySelectorAll('.pc-bloc-time.pc-min .pc-figure'),
        seconds: document.querySelectorAll('.pc-bloc-time.pc-sec .pc-figure')
      };
      
      this.values = {
        hours: parseInt(document.querySelector('.pc-bloc-time.pc-hours').getAttribute('data-init-value')),
        minutes: parseInt(document.querySelector('.pc-bloc-time.pc-min').getAttribute('data-init-value')),
        seconds: parseInt(document.querySelector('.pc-bloc-time.pc-sec').getAttribute('data-init-value'))
      };
      
      this.total_seconds = this.values.hours * 60 * 60 + (this.values.minutes * 60) + this.values.seconds;
      
      // Initialize display
      this.checkHour(this.values.hours, this.$.hours[0], this.$.hours[1]);
      this.checkHour(this.values.minutes, this.$.minutes[0], this.$.minutes[1]);
      this.checkHour(this.values.seconds, this.$.seconds[0], this.$.seconds[1]);
      
      this.count();
    },
    
    count: function() {
      const that = this;
      
      this.countdown_interval = setInterval(function() {
        if(that.total_seconds > 0) {
          --that.values.seconds;
          
          if(that.values.minutes >= 0 && that.values.seconds < 0) {
            that.values.seconds = 59;
            --that.values.minutes;
          }
          
          if(that.values.hours >= 0 && that.values.minutes < 0) {
            that.values.minutes = 59;
            --that.values.hours;
          }
          
          that.checkHour(that.values.hours, that.$.hours[0], that.$.hours[1]);
          that.checkHour(that.values.minutes, that.$.minutes[0], that.$.minutes[1]);
          that.checkHour(that.values.seconds, that.$.seconds[0], that.$.seconds[1]);
          
          --that.total_seconds;
        } else {
          clearInterval(that.countdown_interval);
        }
      }, 1000);
    },
    
    animateFigure: function(el, value) {
      const top = el.querySelector('.pc-top');
      const bottom = el.querySelector('.pc-bottom');
      const back_top = el.querySelector('.pc-top-back');
      const back_bottom = el.querySelector('.pc-bottom-back');
      
      back_top.querySelector('span').textContent = value;
      back_bottom.querySelector('span').textContent = value;
      
      // Animate with GSAP (make sure to include GSAP in your theme)
      if (typeof gsap !== 'undefined') {
        gsap.to(top, {
          duration: 0.8,
          rotationX: -180,
          transformPerspective: 300,
          ease: "power2.out",
          onComplete: function() {
            top.textContent = '';
            bottom.textContent = '';
            requestAnimationFrame(() => {
              top.textContent = value;
              bottom.textContent = value;
            });

            gsap.set(top, { rotationX: 0 });
          }
        });
        
        gsap.to(back_top, {
          duration: 0.8,
          rotationX: 0,
          transformPerspective: 300,
          ease: "power2.out",
          clearProps: "all"
        });
      } else {
        // Fallback if GSAP isn't available
        top.textContent = '';
        bottom.textContent = '';
        requestAnimationFrame(() => {
          top.textContent = value;
          bottom.textContent = value;
        });

        back_top.querySelector('span').textContent = value;
        back_bottom.querySelector('span').textContent = value;
      }
    },
    
    checkHour: function(value, el1, el2) {
      const valStr = value.toString().padStart(2, '0');
      const val1 = valStr.charAt(0);
      const val2 = valStr.charAt(1);
      
      const fig1Value = el1.querySelector('.pc-top').textContent;
      const fig2Value = el2.querySelector('.pc-top').textContent;
      
      if(fig1Value !== val1) this.animateFigure(el1, val1);
      if(fig2Value !== val2) this.animateFigure(el2, val2);
    }
  };
  
  Countdown.init();
});
</script>

{% schema %}
{
  "name": "Countdown Timer",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Draft Countdown"
    },
    {
      "type": "text",
      "id": "highlighted_text",
      "label": "Highlighted Text",
      "default": "Countdown"
    },
    {
      "type": "color",
      "id": "highlight_color",
      "label": "Highlight Color",
      "default": "#ea4c4c"
    },
    {
      "type": "color",
      "id": "digit_color",
      "label": "Digit Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Default Digit Background",
      "default": "#ffffff"
    }
  ],
  "blocks": [
    {
      "type": "hours",
      "name": "Hours",
      "settings": [
        {
          "type": "range",
          "id": "hours",
          "label": "Hours",
          "min": 0,
          "max": 99,
          "default": 24
        },
         {
          "type": "inline_richtext",
          "id": "title",
          "default": "Hours",
          "label": "Hours"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "Digit Background",
          "default": "#ffffff"
        }
      ]
    },
    {
      "type": "minutes",
      "name": "Minutes",
      "settings": [
        {
          "type": "range",
          "id": "minutes",
          "label": "Minutes",
          "min": 0,
          "max": 59,
          "default": 0
        },
         {
          "type": "inline_richtext",
          "id": "minutes_title",
          "default": "Minutes",
          "label": "Minutes"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "Digit Background",
          "default": "#ffffff"
        }
      ]
    },
    {
      "type": "seconds",
      "name": "Seconds",
      "settings": [
        {
          "type": "range",
          "id": "seconds",
          "label": "Seconds",
          "min": 0,
          "max": 59,
          "default": 0
        },
          {
          "type": "inline_richtext",
          "id": "seconds_title",
          "default": "Seconds",
          "label": "Seconds"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "Digit Background",
          "default": "#ffffff"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "PWC CDT",
      "category": "Promotional",
      "blocks": [
        {
          "type": "hours"
        },
        {
          "type": "minutes"
        },
        {
          "type": "seconds"
        }
      ]
    }
  ]
}
{% endschema %}