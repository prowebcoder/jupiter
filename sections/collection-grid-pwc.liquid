{% assign sec_id = '#shopify-section-' | append: section.id %}
<style>
   {{ sec_id }} .pw-discover-by-category {
     padding: 40px 20px;
     background: #fff;
     position: relative;
   }

   {{ sec_id }} .pw-category-heading {
     text-align: center;
     font-size: 2.2rem;
     font-weight: bold;
     margin-bottom: 30px;
   }

   /* Custom slider container */
   {{ sec_id }} .custom-slider-container {
     position: relative;
     overflow: hidden;
     width: 100%;
   }

   {{ sec_id }} .custom-slider-track {
     display: flex;
     transition: transform 0.5s ease;
     will-change: transform;
   }

   {{ sec_id }} .custom-slide {
     background-size: cover;
     background-position: center;
     border-radius: 16px;
     color: white;
     position: relative;
     display: flex;
     align-items: flex-end;
     text-decoration: none;
     overflow: hidden;
     height: 340px;
     transition: transform 0.3s ease;
     box-shadow: 0 6px 14px rgba(0, 0, 0, 0.15);
     flex-shrink: 0;
     margin: 0 8px;
   }

  {{ sec_id }} .custom-slide:hover {
     transform: scale(1.05);
   }

   {{ sec_id }} .pw-card-content {
     background: linear-gradient(to top, rgba(0, 0, 0, 0.65), rgba(0, 0, 0, 0.05));
     padding: 16px;
     width: 100%;
   }

   {{ sec_id }} .pw-card-title {
     font-weight: bold;
     margin-bottom: 6px;
   }

  {{ sec_id }} .pw-card-rating {
     font-size: 0.95rem;
     margin-bottom: 6px;
   }

   {{ sec_id }} .pw-card-subtext {
     margin-bottom: 10px;
     line-height: 1.4;
   }

  {{ sec_id }} .pw-shop-now-button {
     padding: 7px 16px;
     font-weight: 600;
     border: none;
     cursor: pointer;
     font-size: 14px;
   }

   /* Button shape classes */
   {{ sec_id }} .pw-shop-now-button.pill {
     border-radius: 9999px;
   }

   {{ sec_id }} .pw-shop-now-button.rounded {
     border-radius: 12px;
   }

   {{ sec_id }} .pw-shop-now-button.square {
     border-radius: 0;
   }

   /* Navigation buttons */
   {{ sec_id }} .custom-slider-nav {
     position: absolute;
     top: 50%;
     transform: translateY(-50%);
     width: 40px;
     height: 40px;
     background: rgba(255, 255, 255, 0.8);
     border-radius: 50%;
     display: flex;
     align-items: center;
     justify-content: center;
     cursor: pointer;
     z-index: 10;
     opacity: 0.7;
     transition: opacity 0.3s;
   }

  {{ sec_id }} .custom-slider-nav:hover {
     opacity: 1;
   }

   {{ sec_id }} .custom-slider-nav.prev {
     left: 10px;
   }

   {{ sec_id }} .custom-slider-nav.next {
     right: 10px;
   }

   /* Pagination dots */
   {{ sec_id }} .custom-slider-pagination {
     display: flex;
     justify-content: center;
     margin-top: 20px;
   }

   {{ sec_id }} .custom-slider-dot {
     width: 10px;
     height: 10px;
     border-radius: 50%;
     background: #ccc;
     margin: 0 5px;
     cursor: pointer;
     transition: background-color 0.3s;
   }

   {{ sec_id }} .custom-slider-dot.active {
     background: #000;
   }

   /* Autoplay progress bar */
   {{ sec_id }} .autoplay-progress {
     position: absolute;
     bottom: 10px;
     left: 50%;
     transform: translateX(-50%);
     z-index: 10;
     width: 80px;
     height: 4px;
     background: rgba(255, 255, 255, 0.3);
     border-radius: 2px;
     overflow: hidden;
   }

   {{ sec_id }} .autoplay-progress-bar {
     height: 100%;
     width: 0%;
     background: white;
     transition: width 0.1s linear;
   }

   /* Responsive sizes */
   @media (max-width: 767px) {
     {{ sec_id }} .custom-slide {
       height: 280px;
     }

     {{ sec_id }} .pw-card-title {
       font-size: 16px !important;
     }

     {{ sec_id }} .pw-card-subtext {
       font-size: 13px !important;
     }

     {{ sec_id }} .pw-card-rating {
       font-size: 13px;
     }

     {{ sec_id }} .pw-shop-now-button {
       padding: 5px 12px;
       font-size: 13px;
     }

     {{ sec_id }} .custom-slider-nav {
       width: 30px;
       height: 30px;
     }
   }
</style>

<div class="pw-discover-by-category">
  {% if section.settings.heading != blank %}
    <h2 class="pw-category-heading">{{ section.settings.heading }}</h2>
  {% endif %}

  <div class="custom-slider-container">
    <div class="custom-slider-track" id="slider-track-{{ section.id }}">
      {% for block in section.blocks %}
        {% assign collection = collections[block.settings.collection] %}
        <a
          href="{{ collection.url }}"
          class="custom-slide"
          style="background-image: url({{ block.settings.image | img_url: '800x' }});"
        >
          <div class="pw-card-content">
            <h3
              class="pw-card-title"
              style="color: {{ block.settings.title_color }}; font-size: {{ block.settings.title_size }}px;"
            >
              {{ collection.title | upcase }}
            </h3>
            {% comment %}
              <div class="pw-card-rating">★ ★ ★ ★ ☆</div>
            {% endcomment %}

            <p
              class="pw-card-subtext"
              style="color: {{ block.settings.subtitle_color }}; font-size: {{ block.settings.subtitle_size }}px;"
            >
              {{ block.settings.subtitle }}
            </p>
            <button
              class="pw-shop-now-button {{ block.settings.button_shape }}"
              style="background-color: {{ block.settings.button_background_color }}; color: {{ block.settings.button_text_color }};"
            >
              Shop now
            </button>
          </div>
        </a>
      {% endfor %}
    </div>

    <!-- Navigation buttons -->
    <div class="custom-slider-nav prev" id="prev-btn-{{ section.id }}">❮</div>
    <div class="custom-slider-nav next" id="next-btn-{{ section.id }}">❯</div>

    <!-- Autoplay progress bar -->
    <div class="autoplay-progress" id="autoplay-progress-{{ section.id }}">
      <div class="autoplay-progress-bar" id="progress-bar-{{ section.id }}"></div>
    </div>

    <!-- Pagination dots -->
    <div class="custom-slider-pagination" id="pagination-{{ section.id }}"></div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Configuration
    const sliderId = "{{ section.id }}";
    const mobileCardCount = {{ section.settings.mobile_card_count | default: 2 }};
    const autoplayDelay = 3000;
    const transitionSpeed = 500;
    
    // Select elements
    const track = document.getElementById(`slider-track-${sliderId}`);
    const prevBtn = document.getElementById(`prev-btn-${sliderId}`);
    const nextBtn = document.getElementById(`next-btn-${sliderId}`);
    const progressBar = document.getElementById(`progress-bar-${sliderId}`);
    const pagination = document.getElementById(`pagination-${sliderId}`);
    
    // Initialize variables
    let slideWidth;
    let slidesPerView;
    let currentSlide = 0;
    let autoplayInterval;
    let slides = track.querySelectorAll('.custom-slide');
    let slideCount = slides.length;
    
    // Create pagination dots
    const dotCount = Math.ceil(slideCount / slidesPerView);
    for (let i = 0; i < dotCount; i++) {
      const dot = document.createElement('div');
      dot.classList.add('custom-slider-dot');
      if (i === 0) dot.classList.add('active');
      dot.addEventListener('click', () => goToSlide(i));
      pagination.appendChild(dot);
    }
    
    // Set initial slide width based on viewport
    function updateSlideDimensions() {
      const viewportWidth = window.innerWidth;
      
      if (viewportWidth < 768) {
        slidesPerView = mobileCardCount;
      } else if (viewportWidth < 1024) {
        slidesPerView = 3;
      } else {
        slidesPerView = 4;
      }
      
      // Calculate slide width including margin
      slideWidth = (track.offsetWidth - (slidesPerView - 1) * 16) / slidesPerView;
      
      // Apply width to each slide
      slides.forEach(slide => {
        slide.style.width = `${slideWidth}px`;
      });
      
      // Update track width to accommodate all slides
      track.style.width = `${slideCount * (slideWidth + 16)}px`;
      
      // Go to current slide to ensure correct positioning
      goToSlide(currentSlide);
    }
    
    // Go to specific slide
    function goToSlide(index) {
      // Clamp index within valid range
      const maxIndex = slideCount - slidesPerView;
      currentSlide = Math.max(0, Math.min(maxIndex, index));
      
      // Calculate position
      const position = currentSlide * (slideWidth + 16);
      
      // Apply transition
      track.style.transition = `transform ${transitionSpeed}ms ease`;
      track.style.transform = `translateX(-${position}px`;
      
      // Update pagination dots
      updatePagination();
    }
    
    // Navigate to next slide
    function nextSlide() {
      if (currentSlide < slideCount - slidesPerView) {
        goToSlide(currentSlide + 1);
      } else {
        // If at end, loop back to start
        goToSlide(0);
      }
    }
    
    // Navigate to previous slide
    function prevSlide() {
      if (currentSlide > 0) {
        goToSlide(currentSlide - 1);
      } else {
        // If at start, loop to end
        goToSlide(slideCount - slidesPerView);
      }
    }
    
    // Update pagination dots
    function updatePagination() {
      const dots = pagination.querySelectorAll('.custom-slider-dot');
      const activeDotIndex = Math.floor(currentSlide / slidesPerView);
      
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === activeDotIndex);
      });
    }
    
    // Start autoplay
    function startAutoplay() {
      // Reset progress bar
      progressBar.style.width = '0%';
      progressBar.style.transition = `width ${autoplayDelay}ms linear`;
      
      // Start animation
      setTimeout(() => {
        progressBar.style.width = '100%';
      }, 10);
      
      // Set interval to move to next slide
      autoplayInterval = setInterval(() => {
        nextSlide();
        progressBar.style.width = '0%';
        setTimeout(() => {
          progressBar.style.width = '100%';
        }, 10);
      }, autoplayDelay);
    }
    
    // Stop autoplay
    function stopAutoplay() {
      clearInterval(autoplayInterval);
      progressBar.style.transition = 'none';
    }
    
    // Initialize slider
    function initSlider() {
      // Set initial dimensions
      updateSlideDimensions();
      
      // Create pagination
      const dotCount = Math.ceil(slideCount / slidesPerView);
      pagination.innerHTML = '';
      for (let i = 0; i < dotCount; i++) {
        const dot = document.createElement('div');
        dot.classList.add('custom-slider-dot');
        if (i === 0) dot.classList.add('active');
        dot.addEventListener('click', () => {
          goToSlide(i * slidesPerView);
        });
        pagination.appendChild(dot);
      }
      
      // Set up navigation
      prevBtn.addEventListener('click', prevSlide);
      nextBtn.addEventListener('click', nextSlide);
      
      // Start autoplay
      startAutoplay();
      
      // Pause autoplay on hover
      track.addEventListener('mouseenter', stopAutoplay);
      track.addEventListener('mouseleave', startAutoplay);
      
      // Handle window resize
      window.addEventListener('resize', () => {
        updateSlideDimensions();
        // Recreate pagination on resize
        const dotCount = Math.ceil(slideCount / slidesPerView);
        pagination.innerHTML = '';
        for (let i = 0; i < dotCount; i++) {
          const dot = document.createElement('div');
          dot.classList.add('custom-slider-dot');
          if (i === Math.floor(currentSlide / slidesPerView)) dot.classList.add('active');
          dot.addEventListener('click', () => {
            goToSlide(i * slidesPerView);
          });
          pagination.appendChild(dot);
        }
      });
    }
    
    // Initialize the slider
    if (slides.length > 0) {
      initSlider();
    }
  });
</script>

{% schema %}
{
  "name": "PWC: Collection Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Main Heading",
      "default": "Discover by Category"
    },
    {
      "type": "select",
      "id": "mobile_card_count",
      "label": "Mobile Cards per Slide",
      "options": [
        {
          "value": "1",
          "label": "1 card"
        },
        {
          "value": "2",
          "label": "2 cards"
        }
      ],
      "default": "2"
    }
  ],
  "blocks": [
    {
      "type": "category",
      "name": "Category Card",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Select Collection"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Background Image"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Subtitle",
          "default": "Show off your style and stay hydrated wherever you go."
        },
        {
          "type": "color",
          "id": "title_color",
          "label": "Title Color",
          "default": "#ffffff"
        },
        {
          "type": "range",
          "id": "title_size",
          "label": "Title Font Size (px)",
          "min": 12,
          "max": 36,
          "default": 18
        },
        {
          "type": "color",
          "id": "subtitle_color",
          "label": "Subtitle Color",
          "default": "#ffffff"
        },
        {
          "type": "range",
          "id": "subtitle_size",
          "label": "Subtitle Font Size (px)",
          "min": 10,
          "max": 24,
          "default": 14
        },
        {
          "type": "select",
          "id": "button_shape",
          "label": "Button Shape",
          "options": [
            {
              "value": "pill",
              "label": "Pill"
            },
            {
              "value": "rounded",
              "label": "Rounded"
            },
            {
              "value": "square",
              "label": "Square"
            }
          ],
          "default": "rounded"
        },
        {
          "type": "color",
          "id": "button_background_color",
          "label": "Button Background Color",
          "default": "#ffffff"
        },
        {
          "type": "color",
          "id": "button_text_color",
          "label": "Button Text Color",
          "default": "#000000"
        }
      ]
    }
  ],
  "max_blocks": 10,
  "presets": [
    {
      "name": "PWC : Collection Grid",
      "category": "Collections"
    }
  ]
}
{% endschema %}
