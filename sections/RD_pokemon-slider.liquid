{%- liquid
  assign sec_id = '#shopify-section-' | append: section.id
  assign parts = sec_id | split: '_'
  assign last_lower = parts | last
  assign last_part = last_lower | downcase
-%}

<style>
   {{ sec_id }} {
    padding: 50px 0;
    background-color: {{ section.settings.background_color }};
    color: {{ section.settings.text_color }};
  }




    {{ sec_id }} .pc-section-container-{{ last_part }} {
      width: 100%;
      max-width: 1800px;
      margin: 0 auto;
      position: relative;
    }

    {{ sec_id }} .pc-section-heading-{{ last_part }} {
      text-align: center;
      width: 100%;
      margin-bottom: 40px;
     font-size: {{ section.settings.heading_font_size }}px;
    color: {{ section.settings.text_color }};
    }

    {{ sec_id }} .pc-custom-slider-{{ last_part }} {
      position: relative;
      width: 100%;
      overflow: hidden;
      padding: 50px 0;
    }

    {{ sec_id }} .pc-slider-track-{{ last_part }} {
      display: flex;
      transition: transform 0.5s ease;
      will-change: transform;
    }

    {{ sec_id }} .pc-slider-slide-{{ last_part }} {
      position: relative;
      flex: 0 0 {{ section.settings.slide_width }}px;
      height: {{ section.settings.slide_height }}px;
      margin: 0;
      box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2);
      filter: grayscale(80%);
      transition: all 0.5s cubic-bezier(0.25, 0.4, 0.45, 1.4);
      border-radius: 0;
      overflow: hidden;
      background: #2a2a2a;
    }

    {{ sec_id }} .pc-slider-slide-{{ last_part }}.center {
      transform: scale({{ section.settings.center_scale }});
      filter: none;
      z-index: 2;
    }

    {{ sec_id }} .pc-slider-slide-{{ last_part }} img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      padding: 0;
      box-sizing: border-box;
    }

    {{ sec_id }} .pc-slide-info-{{ last_part }} {
      width: 100%;
      position: absolute;
      bottom: 0;
      z-index: 10;
      padding: 15px;

      background: {{section.settings.image_color}}70;
    }

    {{ sec_id }} .pc-slide-info-{{ last_part }} h4 {
      margin: 0;
      padding-bottom: 10px;
      font-size: 1.5rem;
    }

    {{ sec_id }} .pc-slide-info-{{ last_part }} .pc-type-{{ last_part }} {
      font-size: {{ section.settings.subtitle_font_size }}px;
      opacity: 0.8;
    }


    {{ sec_id }} .pc-slider-nav-{{ last_part }} {
      position: absolute;
      top: 50%;
      width: 100%;
      display: flex;
      justify-content: space-between;
      transform: translateY(-50%);
      z-index: 3;
      pointer-events: none;
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }} {
      pointer-events: all;
      width: {{ section.settings.arrow_size }}px;
      height: {{ section.settings.arrow_size }}px;
      border-radius: {% if section.settings.arrow_style == 'round' %}50%{% else %}5px{% endif %};
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      font-weight: bold;
      font-size: {{ section.settings.arrow_size | times: 0.4 }}px;
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-simple {
      background: rgba(255, 255, 255, 0.8);
      color: #000;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-simple:hover {
      background: rgba(255, 255, 255, 1);
      transform: scale(1.1);
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-outline {
      background: transparent;
      color: white;
      border: 2px solid white;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-outline:hover {
      background: white;
      color: #000;
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-gradient {
      background: linear-gradient(45deg, {{ section.settings.gradient_color_1 }}, {{ section.settings.gradient_color_2 }});
      color: white;
      border: none;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-gradient:hover {
      transform: scale(1.1);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-3d {
      background: {{ section.settings.button_color }};
      color: white;
      border: none;
      box-shadow: 0 5px 0 {{ section.settings.button_shadow_color }};
      position: relative;
      top: 0;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-3d:hover {
      top: 2px;
      box-shadow: 0 3px 0 {{ section.settings.button_shadow_color }};
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-3d:active {
      top: 5px;
      box-shadow: none;
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-minimal {
      background: transparent;
      color: white;
      border: none;
      font-size: {{ section.settings.arrow_size | times: 0.6 }}px;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.style-minimal:hover {
      color: {{ section.settings.accent_color }};
    }

    {{ sec_id }} .pc-slider-button-{{ last_part }}.prev {
      margin-left: {{ section.settings.arrow_offset }}px;
    }
    {{ sec_id }} .pc-slider-button-{{ last_part }}.next {
      margin-right: {{ section.settings.arrow_offset }}px;
    }

    {{ sec_id }} .pc-slider-dots-{{ last_part }} {
      display: flex;
      justify-content: center;
      margin-top: 80px;
      gap: 10px;
    }

    {{ sec_id }} .pc-slider-dot-{{ last_part }} {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.5);
      cursor: pointer;
      transition: all 0.3s ease;
    }

    {{ sec_id }} .pc-slider-dot-{{ last_part }}.active {
      background: white;
      transform: scale(1.2);
    }

    @media (max-width: 768px) {
      {{ sec_id }} .pc-slider-slide-{{ last_part }} {
        flex: 0 0 calc({{ section.settings.slide_width }}px * 0.8);
        height: calc({{ section.settings.slide_height }}px * 0.8);
      }

      {{ sec_id }} .pc-slider-slide-{{ last_part }}.center {
        transform: scale(1);
      }

      {{ sec_id }} .pc-slider-button-{{ last_part }} {
        width: {{ section.settings.arrow_size_mobile }}px;
        height: {{ section.settings.arrow_size_mobile }}px;
        font-size: {{ section.settings.arrow_size_mobile | times: 0.4 }}px;
      }

      {{ sec_id }} .pc-slider-button-{{ last_part }}.style-minimal {
        font-size: {{ section.settings.arrow_size_mobile | times: 0.6 }}px;
      }
    }
</style>

<pc-pokemon-slider-{{ last_part }} class="pc-pokemon-slider-{{ last_part }}" data-section-id="{{ section.id }}">
  <div class="pc-section-container-{{ last_part }}">
    <h2 class="pc-section-heading-{{ last_part }}">{{ section.settings.heading }}</h2>

    <div class="pc-custom-slider-{{ last_part }}">
      <div class="pc-slider-track-{{ last_part }}" id="pc-slider-track-{{ section.id }}">
        {% for block in section.blocks %}
          <div class="pc-slider-slide-{{ last_part }}" data-index="{{ forloop.index0 }}">
            {% if block.settings.image != blank %}
              {{-
                block.settings.image
                | image_url: width: 800
                | image_tag: loading: 'lazy', alt: block.settings.title
              -}}
            {% else %}
              <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
                {{ 'product-1' | placeholder_svg_tag }}
              </div>
            {% endif %}
            <div class="pc-slide-info-{{ last_part }}">
              <h4 class="pc-name-{{ last_part }}">{{ block.settings.title }}</h4>
              <span class="pc-type-{{ last_part }}">{{ block.settings.subtitle }}</span>
            </div>
          </div>
        {% endfor %}
      </div>

      {% if section.settings.show_navigation %}
        <div class="pc-slider-nav-{{ last_part }}">
          <button
            class="pc-slider-button-{{ last_part }} style-{{ section.settings.arrow_style }} prev"
            id="pc-prev-{{ section.id }}"
          >
            ←
          </button>
          <button
            class="pc-slider-button-{{ last_part }} style-{{ section.settings.arrow_style }} next"
            id="pc-next-{{ section.id }}"
          >
            →
          </button>
        </div>
      {% endif %}

      {% if section.settings.show_dots %}
        <div class="pc-slider-dots-{{ last_part }}" id="pc-slider-dots-{{ section.id }}">
          {% for block in section.blocks %}
            <div class="pc-slider-dot-{{ last_part }}" data-index="{{ forloop.index0 }}"></div>
          {% endfor %}
        </div>
      {% endif %}
    </div>
  </div>
</pc-pokemon-slider-{{ last_part }}>

<script>
  class PokemonSlider extends HTMLElement {
    constructor() {
      super();
      this.sectionId = this.dataset.sectionId;
      this.sliderTrack = this.querySelector(`#pc-slider-track-${this.sectionId}`);
      this.slides = this.querySelectorAll(`#pc-slider-track-${this.sectionId} .pc-slider-slide-{{ last_part }}`);
      this.prevBtn = this.querySelector(`#pc-prev-${this.sectionId}`);
      this.nextBtn = this.querySelector(`#pc-next-${this.sectionId}`);
      this.dotsContainer = this.querySelector(`#pc-slider-dots-${this.sectionId}`);
      this.dots = this.dotsContainer ? this.dotsContainer.querySelectorAll('.pc-slider-dot-{{ last_part }}') : [];
      
      if (!this.sliderTrack || this.slides.length === 0) return;
      
      this.itemsPerView = {{ section.settings.items_per_view }};
      this.slideWidth = {{ section.settings.slide_width }};
      this.centerScale = {{ section.settings.center_scale }};
      this.autoplay = {{ section.settings.autoplay }};
      this.autoplayDelay = {{ section.settings.autoplay_delay }};
      this.infiniteLoop = {{ section.settings.infinite_loop }};
      
      this.currentIndex = 0;
      this.autoPlayInterval = null;
      
      this.initSlider();
      this.setupEventListeners();
    }

    initSlider() {
      this.updateSlider();
      this.centerActiveSlide();
      this.updateDots();
      
      if (this.autoplay) {
        this.startAutoplay();
      }
    }

    updateSlider() {
      const centerOffset = Math.floor(this.itemsPerView / 2);
      const trackWidth = this.sliderTrack.offsetWidth;
      const slideOffset = (trackWidth / 2) - (this.slideWidth / 2) - (this.slideWidth * centerOffset);
      
      this.sliderTrack.style.transform = `translateX(${slideOffset - (this.currentIndex * this.slideWidth)}px)`;
      
      if (this.prevBtn && this.nextBtn) {
        this.prevBtn.classList.toggle('hidden', !this.infiniteLoop && this.currentIndex === 0);
        this.nextBtn.classList.toggle('hidden', !this.infiniteLoop && this.currentIndex >= this.slides.length - this.itemsPerView);
      }
    }

    centerActiveSlide() {
      this.slides.forEach((slide, index) => {
        slide.classList.remove('center');
        
        if (index >= this.currentIndex && index < this.currentIndex + this.itemsPerView) {
          const positionInView = index - this.currentIndex;
          if (positionInView === Math.floor(this.itemsPerView / 2)) {
            slide.classList.add('center');
          }
        }
      });
    }

    updateDots() {
      if (!this.dotsContainer) return;
      
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }

    goToSlide(index) {
      if (!this.infiniteLoop && (index < 0 || index > this.slides.length - this.itemsPerView)) return;
      
      this.currentIndex = index;
      this.updateSlider();
      this.centerActiveSlide();
      this.updateDots();
      
      if (this.autoplay) {
        clearInterval(this.autoPlayInterval);
        this.startAutoplay();
      }
    }

    nextSlide() {
      if (this.infiniteLoop || this.currentIndex < this.slides.length - this.itemsPerView) {
        this.currentIndex = (this.currentIndex + 1) % (this.slides.length - this.itemsPerView + 1);
        this.updateSlider();
        this.centerActiveSlide();
        this.updateDots();
      }
    }

    prevSlide() {
      if (this.infiniteLoop || this.currentIndex > 0) {
        this.currentIndex = (this.currentIndex - 1 + (this.slides.length - this.itemsPerView + 1)) % (this.slides.length - this.itemsPerView + 1);
        this.updateSlider();
        this.centerActiveSlide();
        this.updateDots();
      }
    }

    startAutoplay() {
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, this.autoplayDelay);
    }

    setupEventListeners() {
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.nextSlide());
      }
      
      this.slides.forEach((slide, index) => {
        slide.addEventListener('click', () => {
          const centerPosition = Math.floor(this.itemsPerView / 2);
          const targetIndex = Math.max(0, index - centerPosition);
          this.goToSlide(Math.min(targetIndex, this.slides.length - this.itemsPerView));
        });
      });
      
      if (this.dotsContainer) {
        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            this.goToSlide(index);
          });
        });
      }
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });
    }
  }
  
  customElements.define('pc-pokemon-slider-{{ last_part }}', PokemonSlider);
</script>

{% schema %}
{
  "name": "PWC - Pokemon Slider #1",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Collection"
    },
    {
      "type": "range",
      "id": "items_per_view",
      "label": "Items to Show",
      "min": 3,
      "max": 7,
      "step": 1,
      "default": 5
    },
    {
      "type": "range",
      "id": "slide_width",
      "label": "Slide Width",
      "min": 200,
      "max": 400,
      "step": 10,
      "default": 300,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "slide_height",
      "label": "Slide Height",
      "min": 300,
      "max": 600,
      "step": 20,
      "default": 400,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "center_scale",
      "label": "Center Slide Scale",
      "min": 1,
      "max": 1.5,
      "step": 0.1,
      "default": 1.2,
      "unit": "x"
    },
    {
      "type": "header",
      "content": "Navigation Settings"
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show Navigation Dots",
      "default": true
    },
    {
      "type": "select",
      "id": "arrow_style",
      "label": "Arrow Button Style",
      "options": [
        {"value": "simple", "label": "Simple"},
        {"value": "outline", "label": "Outline"},
        {"value": "gradient", "label": "Gradient"},
        {"value": "3d", "label": "3D"},
        {"value": "minimal", "label": "Minimal"}
      ],
      "default": "simple"
    },
    {
      "type": "range",
      "id": "arrow_size",
      "label": "Arrow Size (Desktop)",
      "min": 30,
      "max": 80,
      "step": 5,
      "default": 50,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "arrow_size_mobile",
      "label": "Arrow Size (Mobile)",
      "min": 20,
      "max": 60,
      "step": 5,
      "default": 40,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "arrow_offset",
      "label": "Arrow Horizontal Offset",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 20,
      "unit": "px"
    },
    {
  "type": "color",
  "id": "text_color",
  "label": "Text Color",
  "default": "#000"
},
{
  "type": "color",
  "id": "background_color",
  "label": "Background Color",
  "default": "#fff"
},
    {
  "type": "color",
  "id": "image_color",
  "label": "Image Background Color",
  "default": "#fff"
},
{
  "type": "range",
  "id": "heading_font_size",
  "label": "Heading Font Size",
  "min": 16,
  "max": 60,
  "step": 1,
  "default": 32,
  "unit": "px"
},
    {
  "type": "range",
  "id": "subtitle_font_size",
  "label": "Subtitle Font Size",
  "min": 10,
  "max": 30,
  "step": 1,
  "default": 14,
  "unit": "px"
}

,
    {
      "type": "color",
      "id": "gradient_color_1",
      "label": "Gradient Color 1",
      "default": "#c31432"
    },
    {
      "type": "color",
      "id": "gradient_color_2",
      "label": "Gradient Color 2",
      "default": "#240b36"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "3D Button Color",
      "default": "#c31432"
    },
    {
      "type": "color",
      "id": "button_shadow_color",
      "label": "3D Shadow Color",
      "default": "#7a0c20"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Minimal Hover Color",
      "default": "#c31432"
    },
    {
      "type": "header",
      "content": "Slider Behavior"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "infinite_loop",
      "label": "Infinite Loop",
      "default": true
    },
    {
      "type": "number",
      "id": "autoplay_delay",
      "label": "Autoplay Delay (ms)",
      "default": 3000
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Slide Title"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Subtitle",
          "default": "Slide Subtitle"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "PWC - Pokemon Slider #1",
      "category": "Custom",
      "blocks": [
        {"type": "slide"},
        {"type": "slide"},
        {"type": "slide"}
      ]
    }
  ]
}
{% endschema %}
