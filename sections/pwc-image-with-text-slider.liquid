{%- assign sid = '#shopify-section-' | append: section.id -%}
{%- assign slider_id = 'pc-image-slider-' | append: section.id -%}
{%- assign dots_id = 'pc-image-slider-dots-' | append: section.id -%}

{% style %}
  {{ sid }} {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
  }

  {{ sid }} .pc-image-slider {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  {{ sid }} .pc-image-slider::-webkit-scrollbar {
    display: none;
  }
  
  {{ sid }} .pc-image-slider__container {
    width: 100%;
    overflow: hidden;
    position: relative;
  }

  {{ sid }} .pc-image-slider {
    width: 100%;
    display: flex;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    overflow-x: auto;
    gap: {{ section.settings.slide_gap }}px;
    padding-bottom: 20px;
    margin: 0;
  }
  
  {{ sid }} .pc-section-heading.text-center {
    font-size: 18px;
  }

  {{ sid }} .pc-image-slide {
    flex: 0 0 calc((100% / {{ section.settings.desktop_columns }}) - ({{ section.settings.slide_gap }}px * ({{ section.settings.desktop_columns }} - 1) / {{ section.settings.desktop_columns }}));
    scroll-snap-align: start;
    position: relative;
    overflow: hidden;
  }

  {{ sid }} .pc-image-slider.image-adaptive {
    aspect-ratio: auto;
  }
  {{ sid }} .pc-image-slider.image-square {
    aspect-ratio: 4/1;
  }
  {{ sid }} .pc-image-slider.image-portrait {
    aspect-ratio: 2/1;
  }
  {{ sid }} .pc-image-slider.image-landscape {
    aspect-ratio: 6/1;
  }

  {{ sid }} .pc-image-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 0.5s ease;
  }

  {{ sid }} .pc-image-slide:hover img {
    transform: scale(1.05);
  }

  {{ sid }} .pc-image-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: {{ section.settings.content_position }};
    align-items: {{ section.settings.content_alignment }};
    text-align: {{ section.settings.text_alignment }};
    padding: {{ section.settings.content_padding }}px;
    color: {{ section.settings.text_color }};
    background-color: rgba({{ section.settings.overlay_color.red }}, {{ section.settings.overlay_color.green }}, {{ section.settings.overlay_color.blue }}, {{ section.settings.overlay_opacity | divided_by: 100.0 }});
  }

  {{ sid }} .pc-image-heading {
    font-size: {{ section.settings.heading_size }}px;
    margin: 0;
    transition: transform 0.3s ease;
    color: {{ section.settings.heading_color }};
  }

  {{ sid }} .pc-image-text {
    font-size: {{ section.settings.text_size }}px;
    margin-bottom: 12px;
  }

  {{ sid }} .pc-image-button {
    padding: {{ section.settings.button_padding_top }}px {{ section.settings.button_padding_sides }}px;
    background-color: {{ section.settings.button_color }};
    color: {{ section.settings.button_text_color }};
    border-radius: {{ section.settings.button_border_radius }}px;
    text-decoration: none;
    font-weight: {{ section.settings.button_font_weight }};
    border: none;
    cursor: pointer;
    font-size: {{ section.settings.button_font_size }}px;
    border: {{ section.settings.button_border_width }}px solid {{ section.settings.button_border_color }};
  }

  {{ sid }} .pc-image-button:hover {
    background-color: {{ section.settings.button_hover_color }};
    color: {{ section.settings.button_text_hover_color }};
    border-color: {{ section.settings.button_border_hover_color }};
  }

  {{ sid }} .pc-image-slider__arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: {{ section.settings.arrow_size }}px;
    height: {{ section.settings.arrow_size }}px;
    background: {{ section.settings.arrow_background }};
    color: {{ section.settings.arrow_color }};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1;
    border: none;
    opacity: {{ section.settings.arrow_opacity }};
    transition: opacity 0.3s ease;
  }

  {{ sid }} .pc-image-slider__arrow:hover {
    opacity: 1;
  }

  {{ sid }} .pc-image-slider__arrow--prev {
    left: 10px;
  }

  {{ sid }} .pc-image-slider__arrow--next {
    right: 10px;
  }

  {{ sid }} .pc-image-slider__arrow svg {
    width: {{ section.settings.arrow_icon_size }}px;
    height: {{ section.settings.arrow_icon_size }}px;
  }

  {{ sid }} .pc-image-slider__dots {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 20px;
  }

  {{ sid }} .pc-image-slider__dot {
    width: {{ section.settings.dot_size }}px;
    height: {{ section.settings.dot_size }}px;
    border-radius: 50%;
    background: {{ section.settings.dot_color }};
    opacity: 0.5;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  {{ sid }} .pc-image-slider__dot.active {
    opacity: 1;
    background: {{ section.settings.dot_active_color }};
    transform: scale(1.2);
  }

  {{ sid }} span.pc-hide {
    display: none;
  }

  @media screen and (max-width: 749px) {
    {{ sid }} .pc-image-slide {
      flex: 0 0 calc((100% / {{ section.settings.mobile_columns }}) - ({{ section.settings.slide_gap }}px * ({{ section.settings.mobile_columns }} - 1) / {{ section.settings.mobile_columns }}));
    }

    {{ sid }} .pc-image-slider__arrow {
      width: {{ section.settings.arrow_size_mobile }}px;
      height: {{ section.settings.arrow_size_mobile }}px;
    }

    {{ sid }} .pc-image-slider__arrow--prev {
      left: 10px;
    }

    {{ sid }} .pc-image-slider__arrow--next {
      right: 10px;
    }

    {{ sid }} .pc-image-heading {
      font-size: calc({{ section.settings.heading_size }}px * 0.8);
    }

    {{ sid }} .pc-image-text {
      font-size: calc({{ section.settings.text_size }}px * 0.8);
    }
  }
{% endstyle %}

<div class="pc-image-slider__container">
  {%- if section.settings.heading != blank -%}
    <h2 class="pc-section-heading{% if section.settings.title_center %} text-center{% endif %}">
      {{ section.settings.heading }}
    </h2>
  {%- endif -%}

 {% comment %} Update the slider div to use data attributes instead of JSON {% endcomment %}
<div class="pc-image-slider image-{{ section.settings.image_shape }}" 
     id="pc-image-slider-{{ section.id }}"
     data-slide-gap="{{ section.settings.slide_gap }}"
     data-loop="{{ section.settings.loop }}"
     data-autoplay="{{ section.settings.autoplay }}"
     data-autoplay-speed="{{ section.settings.autoplay_speed }}">
  {%- for block in section.blocks -%}
    <div class="pc-image-slide" {{ block.shopify_attributes }}>
      {%- if block.settings.image != blank -%}
        {%- liquid
          assign image_height = block.settings.image.width | divided_by: block.settings.image.aspect_ratio
          assign sizes = "100vw"
        -%}
        {{ block.settings.image | image_url: width: 1500 | image_tag:
          loading: 'lazy',
          width: block.settings.image.width,
          height: image_height,
          sizes: sizes,
          widths: '375, 550, 750, 1100, 1500, 1780, 2000, 3000, 3840',
          alt: block.settings.image.alt | escape
        }}
      {%- else -%}
        {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
      {%- endif -%}

      <div class="pc-image-content">
        {%- if block.settings.heading != blank -%}
          <h3 class="pc-image-heading">{{ block.settings.heading }}</h3>
        {%- endif -%}
        
        {%- if block.settings.text != blank -%}
          <div class="pc-image-text">{{ block.settings.text }}</div>
        {%- endif -%}
        
        {%- if block.settings.button_label != blank -%}
          <a href="{{ block.settings.button_link }}" class="pc-image-button">
            {{ block.settings.button_label }}
          </a>
        {%- endif -%}
      </div>
    </div>
  {%- endfor -%}
</div>

  {%- if section.settings.show_arrows -%}
    <button class="pc-image-slider__arrow pc-image-slider__arrow--prev" aria-label="Previous slide">
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <button class="pc-image-slider__arrow pc-image-slider__arrow--next" aria-label="Next slide">
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  {%- endif -%}

  {%- if section.settings.show_dots -%}
    <div class="pc-image-slider__dots" id="{{ dots_id }}">
      {%- for block in section.blocks -%}
        <div class="pc-image-slider__dot" data-index="{{ forloop.index0 }}">
          <span class="pc-hide">.</span>
        </div>
      {%- endfor -%}
    </div>
  {%- endif -%}
</div>

<script>
class PCImageSlider {
  constructor(sectionId) {
    this.sectionId = sectionId;
    this.slider = document.getElementById(`pc-image-slider-${sectionId}`);
    this.prevArrow = document.querySelector(`#pc-image-slider-${sectionId} ~ .pc-image-slider__arrow--prev`);
    this.nextArrow = document.querySelector(`#pc-image-slider-${sectionId} ~ .pc-image-slider__arrow--next`);
    this.dotsContainer = document.getElementById(`pc-image-slider-dots-${sectionId}`);
    
    // Get settings from data attributes
    this.settings = {
      slide_gap: parseInt(this.slider?.dataset?.slideGap) || 20,
      loop: this.slider?.dataset?.loop === 'true',
      autoplay: this.slider?.dataset?.autoplay === 'true',
      autoplay_speed: parseInt(this.slider?.dataset?.autoplaySpeed) || 3
    };
    
    if (!this.slider) return;

    this.isDragging = false;
    this.startPos = 0;
    this.currentScroll = 0;
    this.currentIndex = 0;
    this.slideCount = this.slider.children.length;
    this.slideWidth = this.slider.children[0]?.offsetWidth + this.settings.slide_gap || 0;
    this.autoplayInterval = null;
    this.animationFrameId = null;

    this.init();
  }

  init() {
    this.setupEventListeners();
    if (this.settings.autoplay) {
      this.startAutoplay();
    }
    this.updateArrows();
  }

  setupEventListeners() {
    if (!this.slider) return;
    
    // Mouse/touch events
    this.slider.addEventListener('mousedown', this.handleStart.bind(this));
    this.slider.addEventListener('touchstart', this.handleStart.bind(this), { passive: false });
    window.addEventListener('mousemove', this.handleMove.bind(this));
    window.addEventListener('touchmove', this.handleMove.bind(this), { passive: false });
    window.addEventListener('mouseup', this.handleEnd.bind(this));
    window.addEventListener('touchend', this.handleEnd.bind(this));

    // Navigation buttons
    if (this.prevArrow) this.prevArrow.addEventListener('click', () => {
      this.goToPrevSlide();
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.startAutoplay();
      }
    });
    
    if (this.nextArrow) this.nextArrow.addEventListener('click', () => {
      this.goToNextSlide();
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.startAutoplay();
      }
    });

    // Dot navigation
    if (this.dotsContainer) {
      this.dotsContainer.querySelectorAll('.pc-image-slider__dot').forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
    }

    // Keyboard navigation
    this.slider.addEventListener('keydown', (e) => {
      if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {
        e.preventDefault();
        if (e.key === 'ArrowLeft') this.goToPrevSlide();
        if (e.key === 'ArrowRight') this.goToNextSlide();
      }
    });

    // Scroll events for index tracking
    this.slider.addEventListener('scroll', this.handleScroll.bind(this), { passive: true });

    // Pause autoplay on hover
    this.slider.addEventListener('mouseenter', () => {
      if (this.autoplayInterval) clearInterval(this.autoplayInterval);
    });

    this.slider.addEventListener('mouseleave', () => {
      if (this.settings.autoplay) this.startAutoplay();
    });
  }

  handleStart(e) {
    this.isDragging = true;
    this.startPos = e.clientX || e.touches[0].clientX;
    this.currentScroll = this.slider.scrollLeft;
    this.slider.style.scrollBehavior = 'auto';
    this.slider.style.cursor = 'grabbing';
    if (this.autoplayInterval) clearInterval(this.autoplayInterval);
    e.preventDefault();
  }

  handleMove(e) {
    if (!this.isDragging) return;
    
    cancelAnimationFrame(this.animationFrameId);
    this.animationFrameId = requestAnimationFrame(() => {
      const currentX = e.clientX || e.touches[0].clientX;
      const diff = currentX - this.startPos;
      this.slider.scrollLeft = this.currentScroll - diff;
    });
    
    e.preventDefault();
  }

  handleEnd() {
    if (!this.isDragging) return;
    this.isDragging = false;
    this.slider.style.scrollBehavior = 'smooth';
    this.slider.style.cursor = 'grab';
    
    // Snap to nearest slide
    const scrollPos = this.slider.scrollLeft;
    this.currentIndex = Math.round(scrollPos / this.slideWidth);
    this.goToSlide(this.currentIndex);
    
    if (this.settings.autoplay) this.startAutoplay();
  }

  handleScroll() {
    if (this.isDragging) return;
    
    // Update current index based on scroll position
    const scrollPos = this.slider.scrollLeft;
    const newIndex = Math.round(scrollPos / this.slideWidth);
    
    if (newIndex !== this.currentIndex) {
      this.currentIndex = newIndex;
      this.updateDots();
      this.updateArrows();
    }
  }

  goToSlide(index) {
    if (this.slideCount === 0) return;
    
    // Handle infinite loop
    if (this.settings.loop) {
      if (index < 0) index = this.slideCount - 1;
      if (index >= this.slideCount) index = 0;
    } else {
      index = Math.max(0, Math.min(index, this.slideCount - 1));
    }
    
    this.currentIndex = index;
    this.slider.scrollTo({
      left: index * this.slideWidth,
      behavior: 'smooth'
    });
    
    this.updateDots();
    this.updateArrows();
  }

  goToPrevSlide() {
    if (this.settings.loop && this.currentIndex <= 0) {
      this.goToSlide(this.slideCount - 1);
    } else {
      this.goToSlide(this.currentIndex - 1);
    }
  }

  goToNextSlide() {
    if (this.settings.loop && this.currentIndex >= this.slideCount - 1) {
      this.goToSlide(0);
    } else {
      this.goToSlide(this.currentIndex + 1);
    }
  }

  updateDots() {
    if (this.dotsContainer) {
      const dots = this.dotsContainer.querySelectorAll('.pc-image-slider__dot');
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }
  }

  updateArrows() {
    if (!this.settings.loop && this.prevArrow && this.nextArrow) {
      this.prevArrow.style.visibility = this.currentIndex <= 0 ? 'hidden' : 'visible';
      this.nextArrow.style.visibility = this.currentIndex >= this.slideCount - 1 ? 'hidden' : 'visible';
    }
  }

  startAutoplay() {
    if (this.autoplayInterval) clearInterval(this.autoplayInterval);
    this.autoplayInterval = setInterval(() => {
      if (!this.isDragging) {
        this.goToNextSlide();
      }
    }, this.settings.autoplay_speed * 1000);
  }
}




  document.addEventListener('DOMContentLoaded', function() {
  // Initialize all sliders on the page
  document.querySelectorAll('[id^="pc-image-slider-"]').forEach(slider => {
    const sectionId = slider.id.replace('pc-image-slider-', '');
    new PCImageSlider(sectionId);
  });
});

// Initialize slider when section loads in Shopify editor
if (typeof Shopify !== 'undefined' && Shopify.designMode) {
  document.addEventListener('shopify:section:load', function(e) {
    const slider = e.target.querySelector('[id^="pc-image-slider-"]');
    if (slider) {
      const sectionId = slider.id.replace('pc-image-slider-', '');
      new PCImageSlider(sectionId);
    }
  });
  
  document.addEventListener('shopify:section:unload', function(e) {
    // Cleanup when section is unloaded in editor
    const slider = e.target.querySelector('[id^="pc-image-slider-"]');
    if (slider) {
      // Any necessary cleanup code
    }
  });
}
</script>


{% schema %}
{
  "name": "PC Image Slider",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Collections"
    },
    {
      "type": "checkbox",
      "id": "title_center",
      "label": "Center Heading",
      "default": true
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 36
    },
    {
      "type": "range",
      "id": "slide_gap",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Space Between Slides",
      "default": 20
    },
    {
      "type": "select",
      "id": "image_shape",
      "label": "Image Shape",
      "options": [
        {
          "value": "adaptive",
          "label": "Adapt to Image"
        },
        {
          "value": "square",
          "label": "Square"
        },
        {
          "value": "portrait",
          "label": "Portrait"
        },
        {
          "value": "landscape",
          "label": "Landscape"
        }
      ],
      "default": "square"
    },
    {
      "type": "range",
      "id": "desktop_columns",
      "min": 1,
      "max": 6,
      "step": 1,
      "label": "Desktop Columns",
      "default": 3
    },
    {
      "type": "range",
      "id": "mobile_columns",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Mobile Columns",
      "default": 1
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show Dots Navigation",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Infinite Loop",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Auto-play Slides",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 1,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-play Speed",
      "default": 3
    },
    {
      "type": "header",
      "content": "Arrow Settings"
    },
    {
      "type": "range",
      "id": "arrow_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Arrow Size",
      "default": 40
    },
    {
      "type": "range",
      "id": "arrow_size_mobile",
      "min": 20,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Arrow Size (Mobile)",
      "default": 30
    },
    {
      "type": "range",
      "id": "arrow_icon_size",
      "min": 10,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Arrow Icon Size",
      "default": 16
    },
    {
      "type": "range",
      "id": "arrow_opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Arrow Opacity",
      "default": 0.7
    },
    {
      "type": "color",
      "id": "arrow_background",
      "label": "Arrow Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow Color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Dots Settings"
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 4,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Dot Size",
      "default": 8
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active Dot Color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "select",
      "id": "content_position",
      "label": "Content Vertical Position",
      "options": [
        {
          "value": "flex-start",
          "label": "Top"
        },
        {
          "value": "center",
          "label": "Middle"
        },
        {
          "value": "flex-end",
          "label": "Bottom"
        }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "content_alignment",
      "label": "Content Horizontal Alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text Alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "content_padding",
      "min": 10,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Content Padding",
      "default": 20
    },
    {
      "type": "header",
      "content": "Overlay Settings"
    },
    {
      "type": "color",
      "id": "overlay_color",
      "label": "Overlay Color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Overlay Opacity",
      "default": 30
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading Color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 12,
      "max": 50,
      "step": 1,
      "unit": "px",
      "label": "Heading Size",
      "default": 24
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Text Size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "range",
      "id": "button_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Button Font Size",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_padding_top",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button Padding Top/Bottom",
      "default": 10
    },
    {
      "type": "range",
      "id": "button_padding_sides",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Button Padding Sides",
      "default": 20
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "px",
      "label": "Button Border Radius",
      "default": 5
    },
    {
      "type": "range",
      "id": "button_border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Button Border Width",
      "default": 0
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button Hover Background",
      "default": "#eeeeee"
    },
    {
      "type": "color",
      "id": "button_text_hover_color",
      "label": "Button Hover Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_border_color",
      "label": "Button Border Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_border_hover_color",
      "label": "Button Border Hover Color",
      "default": "#ffffff"
    },
    {
      "type": "select",
      "id": "button_font_weight",
      "label": "Button Font Weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi-bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "600"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading",
          "default": "Slide Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Add your slide description here</p>"
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button Label",
          "default": "Shop Now"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "PC Image Slider",
      "blocks": [
        {
          "type": "slide",
          "settings": {
            "heading": "Collection 1",
            "text": "<p>Shop our latest collection</p>",
            "button_label": "Shop Now"
          }
        },
        {
          "type": "slide",
          "settings": {
            "heading": "Collection 2",
            "text": "<p>New arrivals just in</p>",
            "button_label": "Explore"
          }
        },
        {
          "type": "slide",
          "settings": {
            "heading": "Collection 3",
            "text": "<p>Limited edition items</p>",
            "button_label": "Discover"
          }
        }
      ]
    }
  ]
}
{% endschema %}